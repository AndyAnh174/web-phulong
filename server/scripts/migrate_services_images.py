#!/usr/bin/env python3
"""
Migration Script: Services Image URL -> Image Upload
Ch·∫°y script n√†y t·ª´ trong container ƒë·ªÉ migrate database
"""

import os
import sys
import asyncio
from pathlib import Path

# Th√™m th∆∞ m·ª•c root v√†o Python path
sys.path.append(str(Path(__file__).parent.parent))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from config.settings import settings

def get_database_url():
    """L·∫•y database URL t·ª´ settings ho·∫∑c environment"""
    return f"postgresql://{settings.DATABASE_USER}:{settings.DATABASE_PASSWORD}@{settings.DATABASE_HOST}:{settings.DATABASE_PORT}/{settings.DATABASE_NAME}"

def run_migration():
    """Ch·∫°y migration cho Services"""
    print("üöÄ B·∫Øt ƒë·∫ßu migration: Services image_url -> image_id")
    print("=" * 60)
    
    # T·∫°o k·∫øt n·ªëi database
    DATABASE_URL = get_database_url()
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    db = SessionLocal()
    
    try:
        # 1. Ki·ªÉm tra xem column image_id ƒë√£ t·ªìn t·∫°i ch∆∞a
        print("üìù Ki·ªÉm tra column image_id...")
        result = db.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'services' AND column_name = 'image_id'
        """))
        
        if not result.fetchone():
            print("   ‚Üí Th√™m column image_id v√†o b·∫£ng services...")
            db.execute(text("ALTER TABLE services ADD COLUMN image_id INTEGER"))
            db.commit()
            print("   ‚úÖ ƒê√£ th√™m column image_id")
        else:
            print("   ‚ÑπÔ∏è  Column image_id ƒë√£ t·ªìn t·∫°i")
        
        # 2. T·∫°o foreign key constraint (n·∫øu ch∆∞a c√≥)
        print("üìù T·∫°o foreign key constraint...")
        try:
            db.execute(text("""
                ALTER TABLE services 
                ADD CONSTRAINT fk_services_image_id 
                FOREIGN KEY (image_id) REFERENCES images (id) 
                ON DELETE SET NULL
            """))
            db.commit()
            print("   ‚úÖ ƒê√£ t·∫°o foreign key constraint")
        except Exception as e:
            if "already exists" in str(e).lower():
                print("   ‚ÑπÔ∏è  Foreign key constraint ƒë√£ t·ªìn t·∫°i")
            else:
                print(f"   ‚ö†Ô∏è  L·ªói khi t·∫°o foreign key: {e}")
        
        # 3. Backup v√† x√≥a column image_url
        print("üìù X·ª≠ l√Ω column image_url...")
        
        # Ki·ªÉm tra c√≥ d·ªØ li·ªáu kh√¥ng
        result = db.execute(text("SELECT COUNT(*) FROM services WHERE image_url IS NOT NULL"))
        count = result.scalar()
        
        if count > 0:
            print(f"   ‚ö†Ô∏è  T√¨m th·∫•y {count} services c√≥ image_url")
            print("   üìä Danh s√°ch services c√≥ image_url:")
            
            result = db.execute(text("SELECT id, name, image_url FROM services WHERE image_url IS NOT NULL"))
            for row in result.fetchall():
                print(f"      - ID {row[0]}: {row[1]} -> {row[2]}")
            
            print("\n   ‚ùì D·ªØ li·ªáu image_url s·∫Ω b·ªã m·∫•t khi x√≥a column!")
            print("      B·∫°n c·∫ßn manual chuy·ªÉn ƒë·ªïi sang image_id tr∆∞·ªõc.")
            
        # Ki·ªÉm tra column image_url c√≥ t·ªìn t·∫°i kh√¥ng
        result = db.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'services' AND column_name = 'image_url'
        """))
        
        if result.fetchone():
            if count == 0:
                print("   ‚Üí X√≥a column image_url (kh√¥ng c√≥ d·ªØ li·ªáu)...")
                db.execute(text("ALTER TABLE services DROP COLUMN image_url"))
                db.commit()
                print("   ‚úÖ ƒê√£ x√≥a column image_url")
            else:
                print("   ‚è∏Ô∏è  B·ªè qua x√≥a column image_url (c√≥ d·ªØ li·ªáu)")
        else:
            print("   ‚ÑπÔ∏è  Column image_url kh√¥ng t·ªìn t·∫°i")
        
        print("\nüéâ Migration ho√†n th√†nh!")
        print("üìã T√≥m t·∫Øt:")
        print("   ‚úì Column image_id ƒë√£ s·∫µn s√†ng")
        print("   ‚úì Foreign key constraint ƒë√£ ƒë∆∞·ª£c t·∫°o")
        print("   ‚úì API Services ƒë√£ h·ªó tr·ª£ upload tr·ª±c ti·∫øp")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå L·ªói migration: {e}")
        db.rollback()
        return False
        
    finally:
        db.close()

def check_database_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi database"""
    try:
        DATABASE_URL = get_database_url()
        engine = create_engine(DATABASE_URL)
        
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            result.fetchone()
        
        print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return False

def main():
    """Main function"""
    print("üîÑ MIGRATION SCRIPT - Services Image Upload")
    print("=" * 60)
    print(f"Database: {settings.DATABASE_HOST}:{settings.DATABASE_PORT}/{settings.DATABASE_NAME}")
    print(f"User: {settings.DATABASE_USER}")
    print("=" * 60)
    
    # Ki·ªÉm tra k·∫øt n·ªëi
    if not check_database_connection():
        print("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database!")
        sys.exit(1)
    
    # Ch·∫°y migration
    success = run_migration()
    
    if success:
        print("\n‚úÖ Migration th√†nh c√¥ng!")
        print("\nüìù B∆∞·ªõc ti·∫øp theo:")
        print("   1. Restart server ƒë·ªÉ √°p d·ª•ng model changes")
        print("   2. Test API endpoints:")
        print("      - POST /api/services/ (multipart/form-data)")
        print("      - POST /api/printing/upload-content-image")
        
    else:
        print("\n‚ùå Migration th·∫•t b·∫°i!")
        sys.exit(1)

if __name__ == "__main__":
    main() 